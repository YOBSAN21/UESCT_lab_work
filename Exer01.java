import java.util.Scanner;


public class Exer01 {

    public static void main(String[] args) {

        Exer01.largestPrimeFactor(600);

        int a = Exer01.gcd02(6, 10);
        String r = Exer01.findLongestCommonSequence("abcde", "cde");
    }

    /**
     * Palindrome Check
     * A palindrome is a word which reads the same backward or forward.
     * 'abcba' is a palindrome.
     * Write a method that detects if a string is a palindrome.
     * Tip: Use word.charAt(i) to get the character at position i.
     * @param word
     */
    public static boolean isPalindrome(String word) {
        int i1 = 0;
        int i2 = word.length() - 1;
        while (i2 > i1) {
            if (word.charAt(i1) != word.charAt(i2)) {
                return false;
            }
            ++i1;
            --i2;
        }
        return true;
    }

    /**
     * Even Fibonacci Sum
     * Write a method that returns the sum of all even Fibonacci numbers. Consider all Fibonacci numbers that are less than or equal to n.
     * Each new element in the Fibonacci sequence is generated by adding the previous two elements.
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * @param n
     * @return
     */
    public static Integer evenFibonacciSum(Integer n) {
        int previousFibonacci = 1;
        int currentFibonacci = 2;
        int evenFibonacciSum = 0;
        do {
            if (currentFibonacci % 2 == 0) {
                evenFibonacciSum += currentFibonacci;
            }
            int newFibonacci = currentFibonacci + previousFibonacci;
            previousFibonacci = currentFibonacci;
            currentFibonacci = newFibonacci;
        } while (currentFibonacci < n);
        return evenFibonacciSum;
    }

    /**
     * The Greatest Common Divisor of two positive integers is the largest integer that divides both without remainder.
     * Write a method that returns the Greatest Common Divisor of p and q.
     * @param a
     * @param b
     * @return
     */

    public static int gcd01(int a,int b)
    {
        int r;
        while( b > 0 )
        {
            r = a % b;
            a = b;
            b = r;
        }
        return a;
    }

    public static int gcd02(int p, int q) {
        if (q == 0) {
            return p;
        }
        return gcd02(q, p % q);
    }

    public static boolean packageRice(int big, int small, int goal) {
        boolean result = false;
        if (big * 5 >= goal) {
            if (small >= goal % 5)
                result = true;
        } else {
            if (small >= goal - big * 5) {
                result = true;
            }
        }
        return result;
    }

    public static int getNumberSmallBags(int big, int small, int goal) {
        int result = -1;
        if (big * 5 >= goal) {
            if (small >= goal % 5)
                result = goal % 5;
        } else {
            if (small >= goal - big * 5) {
                result = goal - big * 5;
            }
        }
        return result;
    }

    /**
     * The prime factors of 455 are 5, 7 and 13.
     * Write a method that calculates the largest prime factor of a given number.
     * @param n
     * @return
     */
    public static int largestPrimeFactor(int n) {
        int factor = -1;
        for (int i = 2; i * i <= n; i++) {
            if (n == 1)
                break;
            if (n % i != 0)
                continue;
            factor = i;
            System.out.println(factor);
            while (n % i == 0) {
                n /= i;
            }
        }
        System.out.println(n);
        return n == 1 ? factor : n;
    }

    /**
     * Given two strings, write a method that finds the longest common sub-sequence.
     * @param s1
     * @param s2
     * @return
     */
    public static String findLongestCommonSequence(String s1, String s2) {
        String result = "";
        for (int length = s1.length(); length > 0; length--) {
            int startIndex = 0;
            while (startIndex + length <= s1.length()) {
                String current = s1.substring(startIndex, startIndex + length);
                if (s2.contains(current)) {
                    result = current;
                    break;
                }
                startIndex++;
            }
            if (result.length() != 0) {
                break;
            }
        }
        return result;
    }

    public static String findLongestCommonSequence02(String s1, String s2) {
        String result = "";
        for (int length = s1.length(); length > 0; length--) {
            int startIndex = 0;
            while (startIndex + length <= s1.length()) {
                String current = s1.substring(startIndex, startIndex + length);
                if (s2.contains(current)) {
                    result = current;
                    break;
                }
                startIndex++;
            }
            if (result.length() != 0) {
                break;
            }
        }
        return result;
    }

    /**
     * Write a Java program to display the following character rhombus structure
     * Test Data
     * Input the number: 7
     * Expected Output :
     *       A
     *      ABA
     *     ABCBA
     *    ABCDCBA
     *   ABCDEDCBA
     *  ABCDEFEDCBA
     * ABCDEFGFEDCBA
     *  ABCDEFEDCBA
     *   ABCDEDCBA
     *    ABCDCBA
     *     ABCBA
     *      ABA
     *       A
     */
    public static void printLetters() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Input the number: ");
        int n = sc.nextInt();
        int count = 1;
        int count2 = 1;
        char c = 'A';

        for (int i = 1; i < (n * 2); i++) {
            for (int spc = n - count2; spc > 0; spc--)
            //print space
            {
                System.out.print(" ");
            }
            if (i < n) {
                count2++;
            } else {
                count2--;
            }
            for (int j = 0; j < count; j++) {
                System.out.print(c);//print Character
                if (j < count / 2) {
                    c++;
                } else {
                    c--;
                }
            }
            if (i < n) {
                count = count + 2;
            } else {
                count = count - 2;
            }
            c = 'A';

            System.out.println();
        }
    }

    /**
     * Write a Java program to accept a float value of number and return a rounded float value.
     *
     * Sample data:
     * Input a float number: 12.51
     * The rounded value of 12.510000 is: 13.00
     * Input a float number: 12.49999
     * The rounded value of 12.499990 is: 12.00
     */
    public static void callRoundNum() {

        Scanner in = new Scanner(System.in);
        System.out.print("Input a float number: ");
        float  x = in.nextFloat();
        System.out.printf("The rounded value of %f is: %.2f",x, roundNum(x));
        System.out.printf("\n");
    }

    public static float roundNum(float fn)
    {
        float f_num = (float)Math.floor(fn);
        float c_num = (float)Math.ceil(fn);
        if ((fn - f_num) > (c_num - fn))
        {
            return c_num;
        }
        else if ((c_num - fn) > (fn - f_num))
        {
            return f_num;
        }
        else
        {
            return c_num;
        }
    }




}
